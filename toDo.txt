/*


Our Mission:



In a world full of midi tracks and AI, our goal is to bring you back to the essence of music and once again
put professional musicians back in touch with clients. All tracks will be personally quality (curated) checked, 
and you can rest assured that any artist providing a backing track on this site will be of a high quality.
Instead of using technology to create art, we will instead use it to enable a seamless connection between
singers and instrumentalists, once again encouraging organic music creation and collaboration.

1. Affordable
2. Real musicians playing real instrumentalists
3. Query tracks by bpm, vocal range, key, and a number of other choices.


Work and on and personalise Email Authentication as generated with AI to create a quick boilerplate.

to do: only accept certain file types. MP3, WAV e.t.c

add a file size limit. Reasonable size for a backing track is 10MB (apparently) 

Make sure users and customers have permanent access to their files. Offer a premium subscription 
for higher quality files. 

Number of downloads per song. Popular songs will be near the top of the list.
Offer a featured backing track section on front page for those who pay for it.

Make sure that file names are non-offensive. No weird names. Do correct REGEX so that usernames e.t.c 
are friendly for all ages. Screen for offensive words.

Profile pictures will need to be non offensive. AWS Rekognition can help with this.

is cover===true then input original song artist. We need a way to easily copyright. 
Might be better to get users to copyright their own? if not then Audio.

licensingStatus: 'pending' for example in mongodb

licensingStatus: 'licensed'
licensedBy: 'admin'
licenseDate: Date

Add a checkbox during upload:

‚òëÔ∏è ‚ÄúI confirm that I either own this recording or am submitting it for licensing via this platform.‚Äù


üî∏ Audd.io
Music recognition API, but not for licensing.

Can tell you what song it is ‚Äî useful for flagging content



Form Fields:

Track Title

Original Artist

Composer

Copyright Declaration:

Are they the original composer or performer?

Do they have rights to distribute this track (license declaration)?

License Information (optional, for tracks that need a license)

License Type (if applicable: e.g., cover song license, public domain, etc.)

License ID (from MCPS or other rights holders)

Where This Goes:

Store the metadata and license status in your MongoDB database.

You could use a backingTrack schema with fields like licenseType, licenseVerified, licenseId, etc.

hen a user downloads a backing track, you‚Äôll want to:

Track the download in your database (e.g., increase a downloadCount or downloads field).

Associate the download with the correct licensing status to ensure you're compliant with the law.

Set the track‚Äôs license status to ‚Äúpending‚Äù initially, and once verified (manually or automatically), change it to ‚Äúlicensed‚Äù in the system.

You could build an admin panel for yourself to audit and verify the licenses for tracks that need to be checked manually (e.g., if the track is a cover song).

Create a Terms of Service or License Agreement


audition musicians to post
*/



import express from 'express';
import User from '../models/User.js';

const router = express.Router();

require('vs/base/common/event').LeakageMonitor._threshold = 50;

---

MAY 2025: STRATEGIC & FINANCIAL GROWTH IDEAS
============================================

1. Premium Subscription Model
   - Offer monthly/yearly subscriptions for unlimited downloads, higher quality files, or exclusive tracks.
   - Add a ‚ÄúPro‚Äù or ‚ÄúVIP‚Äù tier for artists (e.g., better analytics, featured placement).

2. Featured Track Placement
   - Allow artists to pay for their tracks to be featured on the homepage or in search results.

3. Affiliate/Referral Program
   - Reward users for bringing in new buyers or artists (e.g., credit, free downloads, or cash).

4. Bundles & Upsells
   - Sell track bundles (e.g., ‚Äú10 for the price of 8‚Äù) or offer discounts on related tracks at checkout.

5. Licensing for Commercial Use
   - Offer special pricing for commercial licenses (e.g., for YouTube, ads, performances).
   - Automate license generation and delivery.

6. Custom Track Requests
   - Let users pay to commission custom tracks from your artist community, with a platform fee.

7. Email Marketing & Retargeting
   - Build an email list and send regular updates, offers, and reminders to past buyers and interested users.
   - Use abandoned cart emails to recover lost sales.

8. Analytics for Artists
   - Offer advanced analytics as a paid feature (e.g., detailed sales, audience insights).

9. Partnerships & B2B Sales
   - Partner with music schools, vocal coaches, or content creators for bulk sales or co-marketing.

10. Marketplace Expansion
    - Allow other types of music products (e.g., sheet music, lesson videos) for cross-selling.

11. Social Proof & Reviews
    - Encourage reviews and ratings for tracks and artists to build trust and increase conversions.

12. Internationalization
    - Support multiple currencies and languages to reach a global audience.

---

Full Next Steps & Review (May 23, 2025)
=======================================

(backing-tracks-website: Next Steps and Code Review)

1. Licensing & Copyright Compliance
----------------------------------
- You have fields for license status in your backing_track.js model, but your upload and admin flows do not yet enforce or verify licensing.
  - Next step: Implement logic to require a license declaration on upload (checkbox, form field).
  - Add admin tools to review and update licenseStatus, licensedBy, and licenseDate.
  - Consider adding endpoints or admin UI for license verification.

2. File Upload Validation
------------------------
- Your to-do notes mention file type and size limits, but your upload logic does not enforce these.
  - Next step: In your upload middleware (middleware/song_upload.js), restrict file types to MP3/WAV and set a max file size (e.g., 10MB).
  - Add user-friendly error messages for invalid uploads.

3. Offensive Content Filtering
-----------------------------
- You filter profanity in comments, but not in track titles, usernames, or file names.
  - Next step: Add profanity checks for track titles, usernames, and uploaded file names during registration and upload.
  - Consider using a library like bad-words for this.

4. Download Tracking & Access
----------------------------
- Your models and webhook increment purchase counts, but you should also track downloads per user for compliance and analytics.
  - Next step: Add logic to increment downloadCount and associate downloads with users.
  - Ensure users can always access purchased tracks (permanent access).

5. Email Personalization & Error Handling
----------------------------------------
- Your email templates are functional but generic.
  - Next step: Personalize email content and add branding.
  - Add try/catch in email functions to handle and log errors gracefully.

6. Test Coverage
----------------
- Your api.test.js covers registration, login, password reset, and uploads, but not all edge cases or admin/licensing flows.
  - Next step: Add tests for:
    - License declaration on upload
    - Admin license approval
    - File type/size rejection
    - Profanity filter rejections

7. Security & Validation
-----------------------
- You use validation schemas, but ensure all endpoints (especially uploads and user updates) are covered.
  - Next step: Double-check all routes for validation and authentication middleware.
  - Sanitize all user input.

8. Admin Features
-----------------
- Your to-do notes mention an admin panel for license review and user auditioning.
  - Next step: Start building admin endpoints or a simple admin UI for:
    - Reviewing pending tracks
    - Approving/denying licenses
    - Auditioning musicians

9. Documentation
----------------
- Your README.md and to-do list are helpful, but you should document new features as you add them.
  - Next step: Update documentation with:
    - Licensing workflow
    - File upload restrictions
    - Admin features

10. Terms of Service & Legal
----------------------------
- You mention needing a Terms of Service or License Agreement.
  - Next step: Draft and add a Terms of Service page and require user agreement on registration/upload.

Note on Input Sanitization
-------------------------
- You use validation schemas (e.g., Joi) for user input in many places, which helps prevent invalid data.
- You have a profanity filter for comments.
- However, there is no evidence of explicit sanitization for:
  - Track titles, usernames, or file names (e.g., to remove HTML, scripts, or offensive content).
  - Uploaded file names (to prevent path traversal or injection).
  - User profile fields beyond basic validation.

Recommendation:
- For full security and user safety, add explicit sanitization for:
  - Track titles
  - Usernames
  - Uploaded file names
  - Any user-generated content that is displayed or stored
- Consider using libraries like `validator` or `sanitize-html` for HTML/script removal, and `bad-words` for profanity filtering in all user-facing fields.

Optional Improvements & Ideas
----------------------------
- Add weekly/monthly analytics for:
  - Track downloads and purchases
  - Most popular tracks and artists
  - User signups and activity
- Consider sending regular summary emails to artists (e.g., sales/downloads for their tracks).
- Implement user notifications for important events (e.g., track approved, license verified, new comment).
- Add audit logging for admin actions (e.g., license approvals, user bans).
- Explore premium features (e.g., higher quality downloads, subscription tiers).
- Integrate with music recognition APIs (e.g., Audd.io) for copyright checks.
- Use AWS Rekognition or similar for profile picture moderation.

Summary of what is already done:
-------------------------------
- Good test coverage for core flows (auth, upload, password reset)
- Profanity filter for comments
- Purchase and download tracking in models
- Email flows implemented
- .env and secrets are ignored in git

What to focus on next:
----------------------
Licensing enforcement, file validation, offensive content filtering, download tracking, admin tools, and legal compliance.

---

(Generated by GitHub Copilot, May 23, 2025)

