//edit this and personalise it as needed. Generated by AI. come back to it.
import dotenv from 'dotenv'; 
dotenv.config(); 
import nodemailer from 'nodemailer';

const transporter = nodemailer.createTransport({
  service: 'Gmail', // or use SendGrid, Outlook, etc.
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

export const sendVerificationEmail = async (email, token) => {
  const verifyUrl = `${process.env.BASE_URL}/auth/verify-email?token=${token}`; //build the url

  //temp email for testing
  const mailOptions = {
    from: `"Acousticversion" <${process.env.EMAIL_USER}>`,
    to: email,
    subject: 'Please verify your email',
    html: `
      <h2>Welcome to Acoustic-version, your home for custom acoustic backing tracks!</h2>
      <p>Click the link below to verify your email:</p>
      <a href="${verifyUrl}">${verifyUrl}</a>
      <p>This link will expire in 24 hours.</p>
    `,
  };

  if (process.env.NODE_ENV === 'test') return;
  await transporter.sendMail(mailOptions);
};

export const sendPasswordResetEmail = async (email, token) => {
  const resetUrl = `${process.env.BASE_URL}/reset-password?token=${token}`;
  const mailOptions = {
    from: `"Acousticversion" <${process.env.EMAIL_USER}>`,
    to: email,
    subject: 'Password Reset Request',
    html: `
      <h2>Password Reset</h2>
      <p>Click the link below to reset your password. This link will expire in 1 hour.</p>
      <a href="${resetUrl}">${resetUrl}</a>
      <p>If you did not request this, you can ignore this email.</p>
    `,
  };
  if (process.env.NODE_ENV === 'test') return;
  await transporter.sendMail(mailOptions);
};

export const sendPurchaseReceiptEmail = async (buyerEmail, track, artist, session) => {
  const downloadUrl = track.fileUrl; // or a secure download link
  const mailOptions = {
    from: `"Backing Tracks" <${process.env.EMAIL_USER}>`,
    to: buyerEmail,
    subject: `Your purchase receipt: ${track.title}`,
    html: `
      <h2>Thank you for your purchase!</h2>
      <p>You bought <b>${track.title}</b> by ${track.originalArtist}.</p>
      <p>Sold by: ${artist?.username || 'the artist'} (${artist?.email || ''})</p>
      <p>Price: $${track.price}</p>
      <p><a href="${downloadUrl}">Download your track</a></p>
      <p>Order ID: ${session.id}</p>
    `,
  };
  if (process.env.NODE_ENV === 'test') return;
  await transporter.sendMail(mailOptions);
};

export const sendSaleNotificationEmail = async (sellerEmail, track, buyer, session) => {
  const mailOptions = {
    from: `"Acousticversion" <${process.env.EMAIL_USER}>`,
    to: sellerEmail,
    subject: `You sold a track: ${track.title}`,
    html: `
      <h2>Congratulations!</h2>
      <p>Your track <b>${track.title}</b> was purchased by ${buyer?.username || buyer?.email || 'a user'}.</p>
      <p>Price: $${track.price}</p>
      <p>Order ID: ${session.id}</p>
    `,
  };
  if (process.env.NODE_ENV === 'test') return;
  await transporter.sendMail(mailOptions);
};

export const sendRefundNotificationEmail = async (email, trackId, refundStatus) => {
  const mailOptions = {
    from: `"Acousticversion" <${process.env.EMAIL_USER}>`,
    to: email,
    subject: 'Your track refund has been processed',
    text: `Your refund for track ID ${trackId} has been processed. If you have any questions, please contact support.\nStripe refund status: ${refundStatus}`
  };
  if (process.env.NODE_ENV === 'test') return;
  await transporter.sendMail(mailOptions);
};