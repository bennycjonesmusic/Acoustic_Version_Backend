import express from 'express';
import { verifyEmail, resendEmail } from '../controllers/emailAuthController.js';
import upload from '../middleware/song_upload.js';
import avatarUpload from '../middleware/avatar_upload.js';
import authMiddleware from '../middleware/customer_auth.js';
import artistAuthMiddleware from '../middleware/artist_auth.js';
import {uploadLimiter, registerLimiter} from '../middleware/rate_limiter.js' //limit amount of times someone can upload
import {
    register,
    login,
    updateS3Key,
    deleteAccount,
    changePassword,
    getUserProfile,
    requestPasswordReset,
    resetPassword,
    updateProfile,
    getUserRole,
    upgradeToArtist,
    getIdAndRole
} from '../controllers/authController.js';
import { getArtistApprovalStatus, getArtistStripeStatus } from '../controllers/artistController.js';
import { addToCart, removeFromCart, getCart, cleanCart } from '../controllers/cart.js';
import { getUserBools } from '../controllers/authController.js';
import publicMiddleware from '../middleware/public_auth.js';

//i know there are routes in here that should be in other route.js files. However, I am learning as i go and this project has quickly developed in size.

//I will move the appropriate files to the appropriate folders as i go.

//define the router. This will handle the routes and be used to handle requests from the frontend.
const router = express.Router();

//deal with registration first. This will handle user registrations. Post ensures that the data is sent in the body of the request.
router.post('/register', registerLimiter, avatarUpload.single('avatar'), register);;

//now let us deal with login. We will use post again, in order to send the data to the client.
router.post('/login', login)

router.post('/delete-account', authMiddleware, deleteAccount);

router.post('/change-password', authMiddleware, changePassword);

router.get('/get-profile', authMiddleware, getUserProfile);

router.post('/request-password-reset', requestPasswordReset);
router.post('/reset-password',  resetPassword);

// Route to upgrade a regular user to artist role
router.post('/upgrade-to-artist', authMiddleware, avatarUpload.single('avatar'), upgradeToArtist);

router.get('/verify-email', verifyEmail);
//all verify email logic generated by AI so i have a base to work on tomorrow. come back to it and fix!

router.post('/resend-email', publicMiddleware, resendEmail);
//update S3 File for ID's that were not initially added.
router.put('/updateS3/:id', authMiddleware, updateS3Key);
// Update user profile (avatar, about, etc.)
router.patch('/update-profile', authMiddleware, avatarUpload.single('avatar'), updateProfile);

// Get user role
router.get('/user-role', authMiddleware, getUserRole);

// Check artist approval status
router.get('/artist-approval-status', authMiddleware, getArtistApprovalStatus);

// Check artist Stripe status
router.get('/artist-stripe-status', authMiddleware, getArtistStripeStatus);

// Cart routes
router.get('/cart', authMiddleware, getCart);
router.post('/cart/add', authMiddleware, addToCart);
router.delete('/cart/remove/:trackId', authMiddleware, removeFromCart);
router.post('/cart/clean', authMiddleware, cleanCart);
router.post('/cart/clear', authMiddleware, async (req, res) => {
    try {
        const User = (await import('../models/User.js')).default;
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }
        
        user.cart = [];
        await user.save();
        return res.status(200).json({ message: "Cart cleared successfully" });
        
    } catch (error) {
        console.error("Error clearing cart:", error);
        return res.status(500).json({ message: "Internal server error" });
    }
});

// Get user commission bools (hasBoughtCommission)
router.get('/user-bools', authMiddleware, getUserBools);

// Get user ID and role
router.get('/get-id-and-role', authMiddleware, getIdAndRole);

export default router;

//move track files into tracks.js